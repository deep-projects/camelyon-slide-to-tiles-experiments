#!/usr/bin/env python3


#%%
import os
from ruamel.yaml import YAML


#%%
yaml = YAML(typ='safe')


#%%
cwl = None
with open('slide-tiles.cwl.yml') as f:
    cwl = yaml.load(f)


#%%
ssh_host = 'avocado01.f4.htw-berlin.de'
ssh_input_dir = '/data/ldap/histopathologic/original_read_only/camelyon/CAMELYON16_2019_02_06/training'
ssh_output_dir = '/data/ldap/histopathologic/processed/camelyon/CAMELYON16_2019_02_06/camelyon_slide_to_tiles_experiments/training'

# normal_086.tif does not exist in dataset
# normal_144.tif cannot be processed
subsets = {
    'training': {
        'tumor': {
            'scanner1': {
                'slides': [os.path.join(ssh_input_dir, 'tumor/tumor_{:03d}.tif'.format(i)) for i in range(1, 71)],
                'masks': [os.path.join(ssh_input_dir, 'lesion_annotations/tumor_{:03d}.xml'.format(i)) for i in range(1, 71)],
                'tiles': [os.path.join(ssh_output_dir, 'tumor_{:03d}.hdf5'.format(i)) for i in range(1, 71)]
            },
            'scanner2': {
                'slides': [os.path.join(ssh_input_dir, 'tumor/tumor_{:03d}.tif'.format(i)) for i in range(71, 112)],
                'masks': [os.path.join(ssh_input_dir, 'lesion_annotations/tumor_{:03d}.xml'.format(i)) for i in range(71, 112)],
                'tiles': [os.path.join(ssh_output_dir, 'tumor_{:03d}.hdf5'.format(i)) for i in range(71, 112)]
            }
        },
        'normal': {
            'scanner1': {
                'slides': [os.path.join(ssh_input_dir, 'normal/normal_{:03d}.tif'.format(i)) for i in range(1, 101) if i != 86],
                'tiles': [os.path.join(ssh_output_dir, 'normal_{:03d}.hdf5'.format(i)) for i in range(1, 101) if i != 86]
            },
            'scanner2': {
                'slides': [os.path.join(ssh_input_dir, 'normal/normal_{:03d}.tif'.format(i)) for i in range(101, 161) if i != 144],
                'tiles': [os.path.join(ssh_output_dir, 'normal_{:03d}.hdf5'.format(i)) for i in range(101, 161) if i != 144]
            }
        }
    }
}

red = {
    'redVersion': '7',
    'cli': cwl,
    'batches': [],
    'container': {
        'engine': 'docker',
        'settings': {
            'image': {
                'url': 'docker.io/deepprojects/camelyon-utils:0.2.1'
            },
            'ram': 8192
        }
    },
    'execution': {
        'engine': 'ccagency',
        'settings': {
            'access': {
                'url': 'https://agency.f4.htw-berlin.de/cc',
                'auth': {
                    'username': '{{agency_username}}',
                    'password': '{{agency_password}}'
                }
            },
            'retryIfFailed': True,
            'batchConcurrencyLimit': 16
        }
    }
}

for subset_name, subset in subsets.items():
    for target_name, target in subset.items():
        for scanner_name, scanner in target.items():
            slides = scanner['slides']
            masks = scanner.get('masks')
            tiles = scanner['tiles']

            if target_name == 'tumor':
                for slide, mask, tile in zip(slides, masks, tiles):
                    slide_dir, slide_name = os.path.split(slide)
                    mask_dir, mask_name = os.path.split(mask)
                    tile_dir, tile_name = os.path.split(tile)
                    inp = {
                        'slide': {
                            'class': 'File',
                            'connector': {
                                'command': 'red-connector-ssh',
                                'access': {
                                    'host': ssh_host,
                                    'auth': {
                                        'username': '{{cbmi_username}}',
                                        'password': '{{cbmi_password}}'
                                    },
                                    'filePath': os.path.join(slide_dir, slide_name)
                                }
                            }
                        },
                        'mask': {
                            'class': 'File',
                            'connector': {
                                'command': 'red-connector-ssh',
                                'access': {
                                    'host': ssh_host,
                                    'auth': {
                                        'username': '{{cbmi_username}}',
                                        'password': '{{cbmi_password}}'
                                    },
                                    'filePath': os.path.join(mask_dir, mask_name)
                                }
                            }
                        }
                    }
                    if scanner_name == 'scanner2':
                        inp['second_scanner'] = True

                    out = {
                        'tiles': {
                            'class': 'File',
                            'connector': {
                                'command': 'red-connector-ssh',
                                'access': {
                                    'host': ssh_host,
                                    'auth': {
                                        'username': '{{cbmi_username}}',
                                        'password': '{{cbmi_password}}'
                                    },
                                    'filePath': os.path.join(tile_dir, tile_name)
                                }
                            }
                        }
                    }

                    red['batches'].append({'inputs': inp, 'outputs': out})
            else:
                for slide, tile in zip(slides, tiles):
                    slide_dir, slide_name = os.path.split(slide)
                    tile_dir, tile_name = os.path.split(tile)
                    inp = {
                        'slide': {
                            'class': 'File',
                            'connector': {
                                'command': 'red-connector-ssh',
                                'access': {
                                    'host': ssh_host,
                                    'auth': {
                                        'username': '{{cbmi_username}}',
                                        'password': '{{cbmi_password}}'
                                    },
                                    'filePath': os.path.join(slide_dir, slide_name)
                                }
                            }
                        }
                    }
                    if scanner_name == 'scanner2':
                        inp['second_scanner'] = True

                    out = {
                        'tiles': {
                            'class': 'File',
                            'connector': {
                                'command': 'red-connector-ssh',
                                'access': {
                                    'host': ssh_host,
                                    'auth': {
                                        'username': '{{cbmi_username}}',
                                        'password': '{{cbmi_password}}'
                                    },
                                    'filePath': os.path.join(tile_dir, tile_name)
                                }
                            }
                        }
                    }

                    red['batches'].append({'inputs': inp, 'outputs': out})

with open('slide-tiles.red.yml', 'w') as f:
    yaml.dump(red, f)

print(len(red['batches']))
